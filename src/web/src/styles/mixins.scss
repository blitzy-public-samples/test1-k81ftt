// =============================================================================
// DESIGN SYSTEM MIXINS
// Material Design 3 Implementation
// Version: 1.0.0
// =============================================================================

@import './variables';

// -----------------------------------------------------------------------------
// RESPONSIVE DESIGN MIXINS
// Mobile-first approach with fluid breakpoints
// -----------------------------------------------------------------------------

@mixin breakpoint($name, $orientation: null) {
  @if map-has-key($breakpoints, $name) {
    $width: map-get($breakpoints, $name);
    
    @if $orientation {
      @media screen and (min-width: $width) and (orientation: $orientation) {
        @content;
      }
    } @else {
      @media screen and (min-width: $width) {
        @content;
      }
    }
  } @else {
    @error "Unknown breakpoint: #{$name}";
  }
}

@mixin container($max-width: $max-content-width) {
  width: 100%;
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
  padding-right: spacing('lg');
  padding-left: spacing('lg');
  box-sizing: border-box;
}

@mixin orientation($direction) {
  @media screen and (orientation: $direction) {
    @content;
  }
}

// -----------------------------------------------------------------------------
// LAYOUT PATTERN MIXINS
// F-pattern and Z-pattern implementations
// -----------------------------------------------------------------------------

@mixin f-pattern {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: spacing('lg');
  
  > * {
    grid-column: span 12;
    
    @include breakpoint('md') {
      &:nth-child(odd) {
        grid-column: 1 / 9;
      }
      
      &:nth-child(even) {
        grid-column: 5 / -1;
      }
    }
  }
}

@mixin z-pattern {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: spacing('lg');
  
  > * {
    grid-column: span 12;
    
    @include breakpoint('md') {
      &:nth-child(odd) {
        grid-column: 1 / 9;
      }
      
      &:nth-child(even) {
        grid-column: 4 / -1;
        margin-left: auto;
      }
    }
  }
}

@mixin flex-layout($direction: row, $justify: flex-start, $align: stretch, $gap: spacing('md')) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}

@mixin grid-layout($columns: 1fr, $gap: spacing('md'), $flow: row) {
  display: grid;
  grid-template-columns: $columns;
  gap: $gap;
  grid-auto-flow: $flow;
}

@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// -----------------------------------------------------------------------------
// TYPOGRAPHY MIXINS
// Fluid typography system with accessibility features
// -----------------------------------------------------------------------------

@mixin fluid-type($min-size, $max-size, $min-viewport: map-get($breakpoints, 'xs'), $max-viewport: map-get($breakpoints, 'lg')) {
  font-size: clamp(
    #{$min-size}px,
    calc(#{$min-size}px + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-viewport}) / (#{$max-viewport} - #{$min-viewport}))),
    #{$max-size}px
  );
}

@mixin heading($level) {
  $scale: 1.25;
  $base-size: $font-size-base;
  
  @for $i from 1 through 6 {
    @if $i == $level {
      font-size: $base-size * pow($scale, (6 - $i));
      line-height: 1.2;
      margin-bottom: spacing('lg');
      font-weight: if($i <= 2, 700, 600);
    }
  }
}

@mixin line-height($multiplier: 1.5) {
  line-height: $multiplier * $line-height-base;
}

// -----------------------------------------------------------------------------
// ACCESSIBILITY MIXINS
// WCAG 2.1 Level AA compliance utilities
// -----------------------------------------------------------------------------

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
  clip-path: inset(50%);
}

@mixin focus-visible {
  outline: 2px solid transparent;
  outline-offset: 2px;
  
  &:focus-visible {
    outline-color: currentColor;
    box-shadow: 0 0 0 3px rgba(currentColor, 0.4);
  }
}

@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    transition: none !important;
    animation: none !important;
  }
}

@mixin high-contrast {
  @media (forced-colors: active) {
    @content;
  }
}

// -----------------------------------------------------------------------------
// MATERIAL DESIGN MIXINS
// MD3 implementation including elevation and state management
// -----------------------------------------------------------------------------

@mixin elevation($level) {
  @if map-has-key($elevation-tokens, $level) {
    box-shadow: map-get($elevation-tokens, $level);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  } @else {
    @error "Invalid elevation level: #{$level}";
  }
}

@mixin state-layer($state, $color: currentColor) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: $color;
    opacity: map-get($state-colors, $state + '-opacity');
    pointer-events: none;
  }
}

// Function to help with power calculations in fluid typography
@function pow($base, $exponent) {
  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }
  @return $value;
}